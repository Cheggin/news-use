# News-Use Backend Justfile
# Comprehensive command runner for backend operations

# Default recipe to display help
default:
    @just --list --unsorted

# ============================================================================
# Environment Setup
# ============================================================================

# Setup Python virtual environment
venv:
    @echo "Creating Python virtual environment..."
    python3 -m venv venv
    @echo "Virtual environment created. Activate with: source venv/bin/activate"

# Install all dependencies
install:
    @echo "Installing Python dependencies..."
    pip install --upgrade pip
    pip install -r requirements.txt
    @echo "Installing Playwright browsers..."
    playwright install
    @echo "Dependencies installed successfully!"

# Install development dependencies only
install-dev:
    @echo "Installing development dependencies..."
    pip install black flake8 mypy pytest pytest-asyncio pytest-cov pre-commit
    pre-commit install
    @echo "Dev dependencies installed!"

# Setup environment file
env:
    @echo "Setting up environment..."
    @if [ ! -f .env ]; then \
        cp .env.example .env; \
        echo "Created .env file from .env.example"; \
        echo "Please update .env with your configuration"; \
    else \
        echo ".env file already exists"; \
    fi

# Complete initial setup
setup: venv
    @echo "Running complete setup..."
    @echo "Please activate venv first: source venv/bin/activate"
    @echo "Then run: just install env"

# ============================================================================
# Development Server
# ============================================================================

# Run the FastAPI server in development mode
dev:
    @echo "Starting development server..."
    uvicorn api:app --reload --host 0.0.0.0 --port 8000 --log-level info

# Run server with custom port
dev-port port="8000":
    @echo "Starting development server on port {{port}}..."
    uvicorn api:app --reload --host 0.0.0.0 --port {{port}}

# Run server in production mode
prod:
    @echo "Starting production server..."
    uvicorn api:app --host 0.0.0.0 --port 8000 --workers 4 --log-level warning

# Run with gunicorn for production
gunicorn:
    @echo "Starting with Gunicorn..."
    gunicorn api:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000

# ============================================================================
# Browser Use Operations
# ============================================================================

# Run Browser Use news aggregation
browser-use query="AI news" *sources="":
    @echo "Running Browser Use for: {{query}}"
    python browser_use.py "{{query}}" {{sources}}

# Run Browser Use with specific model
browser-use-model query="AI news" model="gpt-4":
    @echo "Running Browser Use with {{model}} for: {{query}}"
    python browser_use.py "{{query}}" --model {{model}}

# Run Browser Use in headful mode (visible browser)
browser-use-visible query="AI news":
    @echo "Running Browser Use with visible browser..."
    python browser_use.py "{{query}}" --headless false --verbose

# Test Browser Use configuration
test-browser:
    @echo "Testing Browser Use configuration..."
    python -c "from browser_use import BrowserUseAgent; print('Browser Use OK')"

# ============================================================================
# API Testing
# ============================================================================

# Test API health endpoint
health:
    @echo "Checking API health..."
    curl -s http://localhost:8000/api/health | python -m json.tool

# Create a test newspaper
test-create:
    @echo "Creating test newspaper..."
    curl -X POST http://localhost:8000/api/newspapers \
        -H "Content-Type: application/json" \
        -d '{"query": "test news", "model": "gpt-4.1", "include_public": true}' \
        | python -m json.tool

# List newspapers
test-list:
    @echo "Listing newspapers..."
    curl -s http://localhost:8000/api/newspapers | python -m json.tool

# Get API stats
stats:
    @echo "Getting API statistics..."
    curl -s http://localhost:8000/api/stats | python -m json.tool

# Test all endpoints
test-endpoints:
    @echo "Testing all API endpoints..."
    @just health
    @just test-create
    @just test-list
    @just stats

# ============================================================================
# Code Quality
# ============================================================================

# Format code with black
format:
    @echo "Formatting code with Black..."
    black api.py browser_use.py

# Lint code with flake8
lint:
    @echo "Linting code..."
    flake8 api.py browser_use.py --max-line-length=100 --ignore=E203,W503

# Type check with mypy
typecheck:
    @echo "Type checking..."
    mypy api.py browser_use.py --ignore-missing-imports

# Run all quality checks
quality: format lint typecheck
    @echo "Code quality checks complete!"

# ============================================================================
# Testing
# ============================================================================

# Run all tests
test:
    @echo "Running tests..."
    pytest -v

# Run tests with coverage
test-cov:
    @echo "Running tests with coverage..."
    pytest --cov=. --cov-report=html --cov-report=term

# Run async tests only
test-async:
    @echo "Running async tests..."
    pytest -v -m asyncio

# Run integration tests
test-integration:
    @echo "Running integration tests..."
    pytest -v tests/integration/

# Run unit tests
test-unit:
    @echo "Running unit tests..."
    pytest -v tests/unit/

# ============================================================================
# Database Operations (for production)
# ============================================================================

# Initialize database
db-init:
    @echo "Initializing database..."
    python -c "from api import init_database; init_database()"

# Run database migrations
db-migrate:
    @echo "Running database migrations..."
    alembic upgrade head

# Create new migration
db-migration name:
    @echo "Creating new migration: {{name}}..."
    alembic revision --autogenerate -m "{{name}}"

# Reset database
db-reset:
    @echo "Resetting database..."
    @echo "WARNING: This will delete all data!"
    @read -p "Continue? (y/n) " -n 1 -r; \
    echo; \
    if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
        python -c "from api import reset_database; reset_database()"; \
    fi

# ============================================================================
# Docker Operations
# ============================================================================

# Build Docker image
docker-build:
    @echo "Building Docker image..."
    docker build -t news-use-backend .

# Run Docker container
docker-run:
    @echo "Running Docker container..."
    docker run -p 8000:8000 --env-file .env news-use-backend

# Docker compose up
docker-up:
    @echo "Starting Docker Compose..."
    docker-compose up -d

# Docker compose down
docker-down:
    @echo "Stopping Docker Compose..."
    docker-compose down

# View Docker logs
docker-logs:
    docker-compose logs -f

# ============================================================================
# Monitoring and Logs
# ============================================================================

# View application logs
logs:
    @echo "Viewing application logs..."
    tail -f logs/app.log

# View error logs
logs-error:
    @echo "Viewing error logs..."
    grep ERROR logs/app.log | tail -20

# Monitor API performance
monitor:
    @echo "Monitoring API..."
    watch -n 2 'curl -s http://localhost:8000/api/stats | python -m json.tool'

# Check system resources
resources:
    @echo "System resources..."
    ps aux | grep -E "(python|uvicorn)" | grep -v grep
    @echo ""
    @echo "Port usage:"
    lsof -i :8000

# ============================================================================
# Deployment
# ============================================================================

# Deploy to production
deploy:
    @echo "Deploying to production..."
    @echo "1. Running tests..."
    @just test
    @echo "2. Building Docker image..."
    @just docker-build
    @echo "3. Pushing to registry..."
    # docker push your-registry/news-use-backend
    @echo "Deployment complete!"

# Deploy to staging
deploy-staging:
    @echo "Deploying to staging..."
    git push staging main
    @echo "Staging deployment initiated!"

# ============================================================================
# Maintenance
# ============================================================================

# Clean Python cache files
clean:
    @echo "Cleaning cache files..."
    find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
    find . -type f -name "*.pyc" -delete
    find . -type f -name "*.pyo" -delete
    find . -type f -name ".coverage" -delete
    rm -rf htmlcov/
    rm -rf .pytest_cache/
    rm -rf .mypy_cache/
    @echo "Cache cleaned!"

# Clean all generated files
clean-all: clean
    @echo "Cleaning all generated files..."
    rm -rf venv/
    rm -rf logs/
    rm -rf screenshots/
    rm -rf videos/
    @echo "All cleaned!"

# Update dependencies
update-deps:
    @echo "Updating dependencies..."
    pip install --upgrade pip
    pip list --outdated
    @echo "Run 'pip install --upgrade <package>' for specific updates"

# Security audit
security:
    @echo "Running security audit..."
    pip install safety
    safety check
    bandit -r api.py browser_use.py

# ============================================================================
# Utilities
# ============================================================================

# Generate API documentation
docs:
    @echo "Generating API documentation..."
    python -c "import json; from api import app; print(json.dumps(app.openapi(), indent=2))" > api-docs.json
    @echo "API documentation saved to api-docs.json"

# Interactive Python shell with app context
shell:
    @echo "Starting interactive shell..."
    python -i -c "from api import *; from browser_use import *; print('App context loaded')"

# Show current configuration
config:
    @echo "Current configuration:"
    @echo "------------------------"
    @if [ -f .env ]; then \
        grep -E "^[^#]" .env | head -20; \
    else \
        echo "No .env file found"; \
    fi

# Benchmark API performance
benchmark:
    @echo "Benchmarking API..."
    ab -n 100 -c 10 http://localhost:8000/api/health

# Create backup of data
backup:
    @echo "Creating backup..."
    mkdir -p backups
    timestamp=$$(date +%Y%m%d_%H%M%S); \
    tar -czf backups/backup_$$timestamp.tar.gz *.py .env* requirements.txt
    @echo "Backup created!"

# ============================================================================
# Help and Info
# ============================================================================

# Show Python version and environment info
info:
    @echo "Environment Information:"
    @echo "------------------------"
    python --version
    pip --version
    @echo ""
    @echo "Installed packages:"
    pip list | grep -E "(fastapi|uvicorn|browser-use|playwright)"
    @echo ""
    @echo "Environment variables:"
    env | grep -E "(PORT|HOST|ENV)" || echo "No relevant env vars set"

# Show all available recipes with descriptions
help:
    @echo "News-Use Backend Commands"
    @echo "========================="
    @echo ""
    @echo "Setup:"
    @echo "  just setup          - Complete initial setup"
    @echo "  just install        - Install dependencies"
    @echo "  just env           - Setup environment file"
    @echo ""
    @echo "Development:"
    @echo "  just dev           - Run development server"
    @echo "  just browser-use   - Run Browser Use aggregation"
    @echo "  just test          - Run tests"
    @echo ""
    @echo "Production:"
    @echo "  just prod          - Run production server"
    @echo "  just deploy        - Deploy to production"
    @echo ""
    @echo "Maintenance:"
    @echo "  just clean         - Clean cache files"
    @echo "  just logs          - View logs"
    @echo "  just monitor       - Monitor API"
    @echo ""
    @echo "Run 'just --list' for all commands"